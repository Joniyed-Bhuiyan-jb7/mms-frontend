package bd.edu.seu.messmanagementsystemfrontend.service;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.*;import com.vaadin.flow.component.notification.Notification;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.ParameterizedTypeReference;import org.springframework.http.HttpEntity;import org.springframework.http.HttpMethod;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.HttpClientErrorException;import org.springframework.web.client.RestTemplate;import java.time.LocalDate;import java.time.Month;import java.util.ArrayList;import java.util.List;@Servicepublic class MemberService {    private RestTemplate restTemplate;    @Value("${BASE_URL}")    private  String baseUrl;    public MemberService() {        restTemplate = new RestTemplate();    }    public List<DepositInformation> getDepositList(int month, int year,String name) throws ResourceNotFoundException {        try {            ResponseEntity<List<DepositInformation>> responseEntity = restTemplate.exchange(                    baseUrl + "/deposit/" + month + "/" + year + "/" + name,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<DepositInformation>>() {                    });            List<DepositInformation> responseEntityBody = responseEntity.getBody();            return responseEntityBody;        }catch (Exception e){            throw new ResourceNotFoundException(name);        }    }    public List<Meal> getMemberMonthMealList(int month, int year, String name) throws ResourceNotFoundException {        try {            ResponseEntity<List<Meal>> responseEntity = restTemplate.exchange(                    baseUrl + "/userMonthMeal/" + month + "/" + year + "/" + name,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<Meal>>() {                    });            List<Meal> responseEntityBody = responseEntity.getBody();            return responseEntityBody;        }catch (Exception e){            throw new ResourceNotFoundException(name);        }    }    public List<DailyActivities> getMemberMonthDailyActivites(int month, int year, String name) throws ResourceNotFoundException {        try {            ResponseEntity<List<DailyActivities>> responseEntity = restTemplate.exchange(                    baseUrl + "/userDailyActivities/" + month + "/" + year + "/" + name,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<DailyActivities>>() {                    });            List<DailyActivities> responseEntityBody = responseEntity.getBody();            return responseEntityBody;        }catch (Exception e){            throw new ResourceNotFoundException(name);        }    }    public String saveEvaluation(Evaluation evaluation) {        try {            evaluation.setEvaluationNo(getEvaluationSerial());            HttpEntity<Evaluation> request = new HttpEntity<>(evaluation);            restTemplate.postForObject(baseUrl+"/evaluation", request, Evaluation.class);            return "Success";        }catch (Exception e){            return "Error "+e.getMessage();        }    }    public String saveMeal(Meal meal) {        try {            meal.setMealNo(getMealSerial());            HttpEntity<Meal> request = new HttpEntity<>(meal);            restTemplate.postForObject(baseUrl+"/meal", request, Meal.class);            return "Success";        }catch (Exception e){            return "Error "+e.getMessage();        }    }    public String saveDailActivities(List<Bazar> bazarList, String username,LocalDate date) {        try {            long serial = getActivitiesSerial();            DailyActivities dailyActivities = new DailyActivities();            dailyActivities.setBazar(bazarList);            dailyActivities.setSerialNo(serial);            dailyActivities.setDate(date);            dailyActivities.setUsername(username);            HttpEntity<DailyActivities> request = new HttpEntity<>(dailyActivities);            restTemplate.postForObject(baseUrl+"/dailyActivities", request, Meal.class);            return "Success";        }catch (Exception e){            return "Error "+e.getMessage();        }    }    public double getSumOfTotalDeposit(String name) throws ResourceNotFoundException {        try {            int month = LocalDate.now().getMonthValue();            int year = LocalDate.now().getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/deposit/sum/" + month + "/" + year + "/" + name,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });             return responseEntity.getBody();        }catch (Exception e){            throw new ResourceNotFoundException(name);        }    }    public double getSumOfTotalMeal(String username) throws ResourceNotFoundException {        try {            int month = LocalDate.now().getMonthValue();            int year = LocalDate.now().getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/sumOfuserMonthMeal/" + month + "/" + year + "/" + username,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });            return responseEntity.getBody();        }catch (Exception e){            throw new ResourceNotFoundException(username);        }    }    //todo get the serial from db    public long getEvaluationSerial() throws ResourceNotFoundException {        try {            ResponseEntity<Long> entity = restTemplate.getForEntity(baseUrl + "/maxEvaluation", Long.class);            if(entity.getBody()!=null)return entity.getBody();            else return 1;        }catch (HttpClientErrorException e){            return 1;        }    }    public long getMealSerial() throws ResourceNotFoundException {        try {            ResponseEntity<Long> entity = restTemplate.getForEntity(baseUrl + "/maxMealSerial", Long.class);            if(entity.getBody()!=null)return entity.getBody();            else return 1;        }catch (HttpClientErrorException e){            return 1;        }    }    public long getActivitiesSerial() throws ResourceNotFoundException {        try {            ResponseEntity<Long> entity = restTemplate.getForEntity(baseUrl + "/maxDailyActivities", Long.class);            if(entity.getBody()!=null)return entity.getBody();            else return 1;        }catch (HttpClientErrorException e){            return 1;        }    }}