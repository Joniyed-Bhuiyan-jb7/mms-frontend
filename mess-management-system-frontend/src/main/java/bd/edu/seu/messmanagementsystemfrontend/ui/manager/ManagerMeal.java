package bd.edu.seu.messmanagementsystemfrontend.ui.manager;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.Meal;import bd.edu.seu.messmanagementsystemfrontend.service.ManagerService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.datepicker.DatePicker;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.TextArea;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Route("meal")public class ManagerMeal extends VerticalLayout {    private ManagerService managerService;    public ManagerMeal(HttpSession httpSession,ManagerService managerService) {        super();        this.managerService = managerService;        ManagerHeader managerHeader = new ManagerHeader(httpSession);        managerHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Manager") && !userRole.equals("Admin")){                httpSession.removeAttribute("user");                managerHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        body.setSizeFull();        Footer footer = new Footer();        TextArea today_Meal = new TextArea();        today_Meal.setSizeFull();        try {            today_Meal.setValue("Days meal Details: \n\nSum of today's meals: "+managerService.getSumTodaysMeal(LocalDate.now()));        } catch (ResourceNotFoundException e) {        }        DatePicker datePicker = new DatePicker();        datePicker.setLabel("Select date for show meal details");        datePicker.setValue(LocalDate.now());        datePicker.setSizeFull();        Button show = new Button("Show");        show.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        show.setSizeFull();        Grid<Meal> todaysMealGrid = new Grid<>(Meal.class);        todaysMealGrid.setSizeFull();        if(httpSession.getAttribute("username")!=null) {            todaysMealGrid = getTodaysMealGrid((String) httpSession.getAttribute("username"));        }        body.add(datePicker,show,today_Meal,todaysMealGrid);        TextArea fullArea = new TextArea();        fullArea.setSizeFull();        try {            fullArea.setValue("Full month meal Details: \n\nSum of month meals: "+managerService.getSumOfMonthMeal(datePicker.getValue()));        } catch (ResourceNotFoundException e) { }        Grid<Meal> mealGrid = new Grid<>(Meal.class);        mealGrid.setSizeFull();        if(httpSession.getAttribute("username")!=null) {            mealGrid = getGrid((String) httpSession.getAttribute("username"));        }        Grid<Meal> finalTodaysMealGrid = todaysMealGrid;        Grid<Meal> finalMealGrid = mealGrid;        show.addClickListener(buttonClickEvent -> {            if(!datePicker.isEmpty()){                try {                    today_Meal.setValue("Days meal Details("+datePicker.getValue().toString()+"): \n\nSum of today's meals: "+managerService.getSumTodaysMeal(datePicker.getValue()));                } catch (ResourceNotFoundException e) {                    today_Meal.setValue("Days meal Details("+datePicker.getValue().toString()+"): 0.0");                }                try {                    fullArea.setValue("Full month meal Details:("+datePicker.getValue().toString()+") \n\nSum of month meals: "+managerService.getSumOfMonthMeal(datePicker.getValue()));                } catch (ResourceNotFoundException e) {                    fullArea.setValue("Full month meal Details:("+datePicker.getValue().toString()+"): 0.0");                }                try {                    finalTodaysMealGrid.setItems(managerService.getTodaysMealList(datePicker.getValue()));                } catch (ResourceNotFoundException e) {                    finalTodaysMealGrid.setItems(new ArrayList<>());                }                try {                    finalMealGrid.setItems(managerService.getMonthMealList(datePicker.getValue().getMonthValue(), datePicker.getValue().getYear()));                } catch (ResourceNotFoundException e) {                    finalMealGrid.setItems(new ArrayList<>());                }            }else Notification.show("Date picker is empty");        });        body.add(fullArea,mealGrid);        add(managerHeader,body,footer);    }    public void SetTextArea(){    }    //todo get grid method    public Grid<Meal> getGrid(String name){        Grid<Meal> mealGrid = new Grid<>(Meal.class);        List<Meal> mealList;        try {            mealList = managerService.getMonthMealList(LocalDate.now().getMonthValue(), LocalDate.now().getYear());            mealGrid.setItems(mealList);        } catch (ResourceNotFoundException e) {}        return mealGrid;    }    //todo get grid method    public Grid<Meal> getTodaysMealGrid(String name){        Grid<Meal> mealGrid = new Grid<>(Meal.class);        List<Meal> mealList;        try {            mealList = managerService.getTodaysMealList(LocalDate.now());            mealGrid.setItems(mealList);        } catch (ResourceNotFoundException e) {}        return mealGrid;    }}