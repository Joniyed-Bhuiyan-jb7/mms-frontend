package bd.edu.seu.messmanagementsystemfrontend.service;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.*;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.ParameterizedTypeReference;import org.springframework.http.HttpEntity;import org.springframework.http.HttpMethod;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.HttpClientErrorException;import org.springframework.web.client.RestTemplate;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import java.util.concurrent.atomic.AtomicLong;import java.util.concurrent.atomic.AtomicReference;import java.util.stream.Collectors;@Servicepublic class ManagerService {    private RestTemplate restTemplate;    @Value("${BASE_URL}")    private String baseUrl;    public ManagerService() {        restTemplate = new RestTemplate();    }    public List<DailyActivities> getMonthDailyActivites(int month, int year) throws ResourceNotFoundException {        try {            ResponseEntity<List<DailyActivities>> responseEntity = restTemplate.exchange(                    baseUrl + "/dailyActivities/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<DailyActivities>>() {                    });            List<DailyActivities> responseEntityBody = responseEntity.getBody();            return responseEntityBody;        } catch (Exception e) {            throw new ResourceNotFoundException("Empty list");        }    }    public String delete(long serialvalue) {        if (serialvalue > 0) {            try {                restTemplate.delete(baseUrl + "/dailyActivities/" + serialvalue);                return "deleted successfully";            } catch (Exception e) {                return "Invalid serial provided";            }        } else {            return "Invalid serial provided";        }    }    public double getSumOfMonthCost(LocalDate date) throws ResourceNotFoundException {        try {            int month = date.getMonthValue();            int year = date.getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/sumOfdailyActivities/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });            return responseEntity.getBody();        } catch (Exception e) {            throw new ResourceNotFoundException("Empty");        }    }    public List<Meal> getMonthMealList(int month, int year) throws ResourceNotFoundException {        try {            ResponseEntity<List<Meal>> responseEntity = restTemplate.exchange(                    baseUrl + "/monthMeal/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<Meal>>() {                    });            return responseEntity.getBody();        } catch (Exception e) {            throw new ResourceNotFoundException("Empty list");        }    }    public double getSumOfMonthMeal(LocalDate date) throws ResourceNotFoundException {        try {            int month = date.getMonthValue();            int year = date.getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/sumOfMonthMeal/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });            return responseEntity.getBody();        } catch (Exception e) {            throw new ResourceNotFoundException("Empty");        }    }    public double getSumTodaysMeal(LocalDate date) throws ResourceNotFoundException {        try {            int month = date.getMonthValue();            int year = date.getYear();            ResponseEntity<List<Meal>> responseEntity = restTemplate.exchange(                    baseUrl + "/monthMeal/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<Meal>>() {                    });            List<Meal> mealList = responseEntity.getBody();            AtomicReference<Double> total = new AtomicReference<>((double) 0);            assert mealList != null;            if (!mealList.isEmpty()) {                mealList.forEach(meal -> {                    if (meal.getDate().equals(date)) {                        total.updateAndGet(v -> (double) (v + meal.getBreakfast() + meal.getDinner() + meal.getLunch()));                    }                });            }            return total.get();        } catch (Exception e) {            throw new ResourceNotFoundException("Empty list");        }    }    public List<Meal> getTodaysMealList(LocalDate date) throws ResourceNotFoundException {        try {            int monthValue = date.getMonthValue();            int year = date.getYear();            List<Meal> monthMealList = getMonthMealList(monthValue, year);            List<Meal> daysMealList = monthMealList.stream().filter(meal -> meal.getDate().equals(date)).collect(Collectors.toList());            if (!daysMealList.isEmpty()) {                return daysMealList;            } else {                throw new ResourceNotFoundException("not found");            }        } catch (ResourceNotFoundException e) {            throw new ResourceNotFoundException("not found");        }    }    public List<DepositInformation> getDepositList(int month, int year) throws ResourceNotFoundException {        try {            ResponseEntity<List<DepositInformation>> responseEntity = restTemplate.exchange(                    baseUrl + "/deposit/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<DepositInformation>>() {                    });            List<DepositInformation> responseEntityBody = responseEntity.getBody();            return responseEntityBody;        } catch (Exception e) {            throw new ResourceNotFoundException("Empty");        }    }    public double getSumOfTotalDeposit(LocalDate date) throws ResourceNotFoundException {        try {            int month = date.getMonthValue();            int year = date.getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/deposit/sum/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });            return responseEntity.getBody();        } catch (Exception e) {            return 0;        }    }    public double getSumOfTotalMeal() throws ResourceNotFoundException {        try {            int month = LocalDate.now().getMonthValue();            int year = LocalDate.now().getYear();            ResponseEntity<Double> responseEntity = restTemplate.exchange(                    baseUrl + "/sumOfuserMonthMeal/" + month + "/" + year,                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<Double>() {                    });            return responseEntity.getBody();        } catch (Exception e) {            return 0;        }    }    public double getMealRate(LocalDate date) throws ResourceNotFoundException {        try {            double sumOfMonthCost = getSumOfMonthCost(date);            double sumOfMonthMeal = getSumOfMonthMeal(date);            if (sumOfMonthMeal != 0) {                return sumOfMonthCost / sumOfMonthMeal;            } else {                return 0;            }        } catch (ResourceNotFoundException e) {            return 0;        }    }    public String saveDeposit(DepositInformation depositInformation) {        try {            depositInformation.setDepositNo(getDepositSerial());            HttpEntity<DepositInformation> request = new HttpEntity<>(depositInformation);            restTemplate.postForObject(baseUrl + "/deposit", request, Meal.class);            return "Success";        } catch (Exception e) {            return "Error " + e.getMessage();        }    }    public long getDepositSerial() throws ResourceNotFoundException {        try {            ResponseEntity<Long> entity = restTemplate.getForEntity(baseUrl + "/maxDepositSerial", Long.class);            if (entity.getBody() != null) return entity.getBody();            else return 1;        } catch (HttpClientErrorException e) {            return 1;        }    }    public String deleteDepositInfo(long depositNo) {        if (depositNo > 0) {            try {                restTemplate.delete(baseUrl + "/deposit/" + depositNo);                return "deleted successfully";            } catch (Exception e) {                return "Invalid serial provided";            }        } else {            return "Invalid serial provided";        }    }}