package bd.edu.seu.messmanagementsystemfrontend.ui.member;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.Meal;import bd.edu.seu.messmanagementsystemfrontend.service.MemberService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Key;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.datepicker.DatePicker;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.NumberField;import com.vaadin.flow.component.textfield.TextArea;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.data.binder.ValidationException;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;import java.util.List;@Route("memberMeal")public class MemberMeal extends VerticalLayout {    private MemberService memberService;    private Binder<Meal> mealBinder;    public MemberMeal(HttpSession httpSession,MemberService memberService) {        super();        this.memberService = memberService;        mealBinder = new Binder<>(Meal.class);        MemberHeader memberHeader = new MemberHeader(httpSession);        memberHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Member") && !userRole.equals("Admin")&&!userRole.equals("Manager")){                httpSession.removeAttribute("user");                memberHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        body.setSizeFull();        body.add(new Label("MemberMeal"));        NumberField breakFast = new NumberField("BreakFast","BreakFast");        mealBinder.forField(breakFast)                .asRequired()                .withValidator(b-> b>-1,"should >=0")                .bind(Meal::getBreakfast,Meal::setBreakfast);        NumberField dinner = new NumberField("Dinner","Dinner");        mealBinder.forField(dinner)                .asRequired()                .withValidator(d-> d>-1,"should >=0")                .bind(Meal::getDinner,Meal::setDinner);        NumberField lunch = new NumberField("Lunch","Lunch");        lunch.clear();        mealBinder.forField(lunch)                .asRequired()                .withValidator(l-> l>-1,"should >=0")                .bind(Meal::getLunch,Meal::setLunch);        Button saveButton = new Button("Save", VaadinIcon.STOCK.create());        saveButton.addClickShortcut(Key.ENTER);        saveButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        saveButton.setSizeFull();        DatePicker datePicker = new DatePicker("Meal Date");        mealBinder.forField(datePicker)                .asRequired()                .withValidator(d->d.isAfter(LocalDate.now()),"date should be future")                .bind(Meal::getDate,Meal::setDate);        FormLayout formLayout = new FormLayout();        formLayout.add(breakFast,lunch,dinner,datePicker);        body.add(formLayout,saveButton);        TextArea textArea = new TextArea();        textArea.setSizeFull();        if(httpSession.getAttribute("username")!=null){            try {                textArea.setValue("Total meal of this month : "+memberService.getSumOfTotalMeal((String) httpSession.getAttribute("username")));            } catch (ResourceNotFoundException e) {            }        }        body.add(textArea);        Grid<Meal> mealGrid = new Grid<>(Meal.class);        if(httpSession.getAttribute("username")!=null){            mealGrid= getGrid(httpSession.getAttribute("username").toString());        }        body.add(mealGrid);        Footer footer = new Footer();        Grid<Meal> finalMealGrid = mealGrid;        saveButton.addClickListener(buttonClickEvent -> {            if(!dinner.isEmpty() && !breakFast.isEmpty() && !lunch.isEmpty() && datePicker.getValue().isAfter(LocalDate.now())){                Meal meal = new Meal();                try {                    mealBinder.writeBean(meal);                } catch (ValidationException e) {                }                String userName="";                if(httpSession.getAttribute("username")!=null){                    userName = (String) httpSession.getAttribute("username");                }                LocalDate date = datePicker.getValue();                meal.setDate(date);                meal.setUsername(userName);                Notification.show(memberService.saveMeal(meal));                try {                    finalMealGrid.setItems(memberService.getMemberMonthMealList(LocalDate.now().getMonthValue(), LocalDate.now().getYear(),(String) httpSession.getAttribute("username")));                } catch (ResourceNotFoundException e) {                }                if(httpSession.getAttribute("username")!=null){                    try {                        textArea.setValue("Total meal of this month : "+memberService.getSumOfTotalMeal((String) httpSession.getAttribute("username")));                    } catch (ResourceNotFoundException e) {                    }                }                breakFast.clear();                dinner.clear();                lunch.clear();            }else{                Notification.show("Failed.....Date must be in future...and...Empty Field Not allowed ");            }        });        mealGrid=finalMealGrid;        add(memberHeader,body,footer);    }    //todo get grid method    public Grid<Meal> getGrid(String name){        Grid<Meal> mealGrid = new Grid<>(Meal.class);        List<Meal> mealList;        try {            mealList = memberService.getMemberMonthMealList(LocalDate.now().getMonthValue(), LocalDate.now().getYear(), name);            mealGrid.setItems(mealList);        } catch (ResourceNotFoundException e) {            Notification.show("list is empty");        }        return mealGrid;    }}