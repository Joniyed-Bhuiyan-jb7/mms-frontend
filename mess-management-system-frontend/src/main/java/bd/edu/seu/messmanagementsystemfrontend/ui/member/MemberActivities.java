package bd.edu.seu.messmanagementsystemfrontend.ui.member;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.Bazar;import bd.edu.seu.messmanagementsystemfrontend.model.DailyActivities;import bd.edu.seu.messmanagementsystemfrontend.service.MemberService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Key;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.datepicker.DatePicker;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.NumberField;import com.vaadin.flow.component.textfield.TextArea;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.data.binder.ValidationException;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Route("memberActivites")public class MemberActivities extends VerticalLayout {    private MemberService memberService;    private Binder<Bazar> bazarBinder;    public MemberActivities(HttpSession httpSession,MemberService memberService) {        super();        this.memberService = memberService;        bazarBinder = new Binder<>(Bazar.class);        MemberHeader memberHeader = new MemberHeader(httpSession);        memberHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Member") && !userRole.equals("Admin")&&!userRole.equals("Manager")){                httpSession.removeAttribute("user");                memberHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        body.setSizeFull();        body.add(new Label("member activities"));        Grid<DailyActivities> dailyActivitiesGrid = new Grid<>(DailyActivities.class);        if(httpSession.getAttribute("username")!=null){            dailyActivitiesGrid = (getGrid(httpSession.getAttribute("username").toString()));        }        body.add(dailyActivitiesGrid);        dailyActivitiesGrid.setHeight("300px");        TextField bazarName = new TextField("Bazar Name","name");        bazarBinder.forField(bazarName)                .asRequired()                .withValidator(n->n.length()>2,"minimum 2 character")                .bind(Bazar::getName,Bazar::setName);        NumberField unit = new NumberField("Unit","unit");        bazarBinder.forField(unit)                .asRequired()                .withValidator(n->n.doubleValue()>-1,"minimum 2 character")                .bind(Bazar::getUnit,Bazar::setUnit);        NumberField unitPrice = new NumberField("Unit Price","per unit price");        bazarBinder.forField(unitPrice)                .asRequired()                .withValidator(n->n.doubleValue()>-1,"minimum 2 character")                .bind(Bazar::getCostPerUnit,Bazar::setCostPerUnit);        Button add = new Button("Add bazar to the list", VaadinIcon.ADD_DOCK.create());        add.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        add.addClickShortcut(Key.ENTER);        VerticalLayout verticalLayout = new VerticalLayout();        TextArea bazarListArea = new TextArea();        bazarListArea.setWidthFull();        FormLayout formLayout = new FormLayout();        formLayout.add(bazarName,unit,unitPrice,add);        verticalLayout.add(formLayout,bazarListArea);        DatePicker datePicker = new DatePicker("Meal Date");        datePicker.setValue(LocalDate.now());        datePicker.setSizeFull();        body.add(verticalLayout,datePicker);        List<Bazar> bazarList = new ArrayList<>();        add.addClickListener(buttonClickEvent -> {            if(!bazarName.isEmpty()&&!unit.isEmpty()&&!unitPrice.isEmpty()){                Bazar bazar = new Bazar();                try {                    bazarBinder.writeBean(bazar);                } catch (ValidationException e) {                    Notification.show(e.getMessage());                }                bazarList.add(bazar);                bazarListArea.setValue(bazarListArea.getValue()+bazar);                bazarName.clear();                unit.clear();                unitPrice.clear();            }else{                Notification.show("Empty Field Not allowed");            }        });        Button saveDailyActivites = new Button("Save Activites",VaadinIcon.ANGLE_RIGHT.create());        saveDailyActivites.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        saveDailyActivites.setSizeFull();        body.add(saveDailyActivites);        Grid<DailyActivities> finalDailyActivitiesGrid = dailyActivitiesGrid;        saveDailyActivites.addClickListener(buttonClickEvent -> {            if(!bazarList.isEmpty()) {                Notification.show(memberService.saveDailActivities(bazarList, (String) httpSession.getAttribute("username"),datePicker.getValue()));                bazarList.clear();                bazarListArea.clear();                try {                    finalDailyActivitiesGrid.setItems(memberService.getMemberMonthDailyActivites(LocalDate.now().getMonthValue(), LocalDate.now().getYear(), (String)httpSession.getAttribute("username")));                } catch (ResourceNotFoundException e) {                    Notification.show("Empty list");                }            }else{                Notification.show("Bazar list is empyt");            }        });        dailyActivitiesGrid=finalDailyActivitiesGrid;        Footer footer = new Footer();        add(memberHeader,body,footer);    }    public Grid<DailyActivities> getGrid(String name){        Grid<DailyActivities> dailyActivitiesGrid = new Grid<>(DailyActivities.class);        List<DailyActivities> dailyActivitiesList;        try {            dailyActivitiesList = memberService.getMemberMonthDailyActivites(LocalDate.now().getMonthValue(), LocalDate.now().getYear(), name);            dailyActivitiesGrid.setItems(dailyActivitiesList);        } catch (ResourceNotFoundException e) {            Notification.show("list is empty");        }        return dailyActivitiesGrid;    }}