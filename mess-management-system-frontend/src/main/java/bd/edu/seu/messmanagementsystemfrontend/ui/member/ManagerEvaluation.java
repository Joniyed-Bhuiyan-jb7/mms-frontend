package bd.edu.seu.messmanagementsystemfrontend.ui.member;import bd.edu.seu.messmanagementsystemfrontend.model.Evaluation;import bd.edu.seu.messmanagementsystemfrontend.service.MemberService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Key;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.select.Select;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.data.binder.ValidationException;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;@Route("evaluation")public class ManagerEvaluation extends VerticalLayout {    private MemberService memberService;    private Binder<Evaluation> evaluationBinder;    public ManagerEvaluation(HttpSession httpSession, MemberService memberService) {        super();        this.memberService = memberService;        evaluationBinder=new Binder<>(Evaluation.class);        MemberHeader memberHeader = new MemberHeader(httpSession);        memberHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Member") && !userRole.equals("Admin")&&!userRole.equals("Manager")){                httpSession.removeAttribute("user");                memberHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        body.setSizeFull();        Footer footer = new Footer();        body.add(new Label("Evaluation"));        Select<Double> ability = new Select<>(0.0,1.0,2.0,3.0,4.0,5.0);        ability.setLabel("Manager ability-");        ability.setValue(3.0);        ability.setSizeFull();        evaluationBinder.forField(ability)                .asRequired()                .bind(Evaluation::getAblity,Evaluation::setAblity);        Select<Double> relationWithMember = new Select<>(0.0,1.0,2.0,3.0,4.0,5.0);        relationWithMember.setLabel("Relation With member-");        relationWithMember.setSizeFull();        relationWithMember.setValue(3.0);        evaluationBinder.forField(relationWithMember)                .asRequired()                .bind(Evaluation::getRelationWithMember,Evaluation::setRelationWithMember);        Select<Double> foodQuality = new Select<>(0.0,1.0,2.0,3.0,4.0,5.0);        foodQuality.setLabel("Food Quality-");        foodQuality.setValue(3.0);        foodQuality.setSizeFull();        evaluationBinder.forField(foodQuality)                .asRequired()                .bind(Evaluation::getFoodQuality,Evaluation::setFoodQuality);        TextField managerUserName = new TextField("ManagerUserName","manager username");        managerUserName.setRequiredIndicatorVisible(true);        managerUserName.setSizeFull();        evaluationBinder.forField(managerUserName)                .asRequired()                .bind(Evaluation::getManagerUserName,Evaluation::setManagerUserName);        Button submit = new Button("Submit", VaadinIcon.ANGLE_RIGHT.create());        submit.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        submit.setSizeFull();        submit.addClickShortcut(Key.ENTER);        body.add(ability,relationWithMember,foodQuality,managerUserName,submit);        add(memberHeader,body,footer);        submit.addClickListener(event->{            if(!ability.isEmpty() && !relationWithMember.isEmpty() && !foodQuality.isEmpty() && !managerUserName.isEmpty()){                Evaluation evaluation = new Evaluation();                try {                    evaluationBinder.writeBean(evaluation);                } catch (ValidationException e) {                    Notification.show(e.getMessage());                }                String userName = "";                if(httpSession.getAttribute("username")!=null){                     userName = (String) httpSession.getAttribute("username");                }                evaluation.setUsername(userName);                evaluation.setDate(LocalDate.now());                if(!httpSession.getAttribute("username").equals(managerUserName)){                    Notification.show(memberService.saveEvaluation(evaluation));                }else{                    Notification.show("You can not do your evaluation");                }                ability.clear();                relationWithMember.clear();                foodQuality.clear();                managerUserName.clear();            }else{                Notification.show("Empty field not allowed");            }        });    }}