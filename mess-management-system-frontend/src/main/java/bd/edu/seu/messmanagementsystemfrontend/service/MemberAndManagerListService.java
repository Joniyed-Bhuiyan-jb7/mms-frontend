package bd.edu.seu.messmanagementsystemfrontend.service;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.*;import com.vaadin.flow.component.notification.Notification;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.ParameterizedTypeReference;import org.springframework.http.HttpEntity;import org.springframework.http.HttpMethod;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import java.util.ArrayList;import java.util.List;@Servicepublic class MemberAndManagerListService {    private RestTemplate restTemplate;    @Value("${BASE_URL}")    private String baseUrl;    private LoginService loginService;    public MemberAndManagerListService(LoginService loginService) {        this.loginService = loginService;        restTemplate = new RestTemplate();    }    public List<UserWithRole> getMemberAndMangers() throws ResourceNotFoundException {        ResponseEntity<List<UserWithRole>> responseEntity = restTemplate.exchange(                baseUrl + "/userAndRole",                HttpMethod.GET,                null,                new ParameterizedTypeReference<List<UserWithRole>>() {                });        List<UserWithRole> userWithRoles = responseEntity.getBody();        if (!userWithRoles.isEmpty()) {            return userWithRoles;        } else {            throw new ResourceNotFoundException("empty");        }    }    public String updateUserRole(String userName, String roleAsString) {        LoginInformation loginInformation = new LoginInformation();        try {            loginInformation = loginService.getLoginInformation(userName);        } catch (ResourceNotFoundException e) {            Notification.show(e.getMessage());        }        Role role;        if (roleAsString.equals("Member")) role = Role.Member;        else if (roleAsString.equals("Manager")) role = Role.Manager;        else role = Role.Admin;        loginInformation.setRole(role);        try {            HttpEntity<LoginInformation> requestUpdate = new HttpEntity<>(loginInformation);            ResponseEntity<LoginInformation> responseEntity = restTemplate.exchange(                    baseUrl + "/login/" + userName,                    HttpMethod.PUT,                    requestUpdate,                    LoginInformation.class            );            return "successfully changed the role";        } catch (Exception e) {            return "Invalid username";        }    }    public List<UserDetails> getUserList() throws ResourceNotFoundException {        try {            ResponseEntity<List<MemberManager>> responseEntity = restTemplate.exchange(                    baseUrl + "/member_manager",                    HttpMethod.GET,                    null,                    new ParameterizedTypeReference<List<MemberManager>>() {                    });            List<MemberManager> userList = responseEntity.getBody();            List<UserDetails> userDetailsList = new ArrayList<>();            userList.stream().forEach(user -> {                UserDetails userDetails = new UserDetails();                userDetails.setUsername(user.getUsername());                userDetails.setAddress(user.getAddress().toString());                userDetails.setFullName(user.getName().toString());                userDetails.setEmail(user.getEmail());                userDetails.setPhone(user.getPhone().toString());                userDetailsList.add(userDetails);            });            if (!userDetailsList.isEmpty()) {                return userDetailsList;            } else {                return new ArrayList<>();            }        }catch (Exception e){            return new ArrayList<>();        }    }    public String deleteUser(UserDetails userDetails) {        try {            restTemplate.delete(baseUrl + "/member_manager/" + userDetails.getUsername());            return "deleted successfully";        } catch (Exception e) {            return "Invalid serial provided";        }    }    public String deleteUserLoginInformation(UserDetails userDetails) {        try {            restTemplate.delete(baseUrl + "/login/" + userDetails.getUsername());            return "deleted successfully";        } catch (Exception e) {            return "Invalid serial provided";        }    }}