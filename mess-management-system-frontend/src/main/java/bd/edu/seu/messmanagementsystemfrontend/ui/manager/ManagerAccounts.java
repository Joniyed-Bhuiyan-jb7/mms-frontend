package bd.edu.seu.messmanagementsystemfrontend.ui.manager;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.DepositInformation;import bd.edu.seu.messmanagementsystemfrontend.service.ManagerService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Component;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.datepicker.DatePicker;import com.vaadin.flow.component.dialog.Dialog;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.html.NativeButton;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.HorizontalLayout;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.NumberField;import com.vaadin.flow.component.textfield.TextArea;import com.vaadin.flow.component.textfield.TextField;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.data.binder.ValidationException;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import java.util.concurrent.atomic.AtomicLong;@Route("accounts")public class ManagerAccounts extends VerticalLayout {    private ManagerService managerService;    private Binder<DepositInformation> depositInformationBinder;    public ManagerAccounts(HttpSession httpSession,ManagerService managerService) {        super();        this.managerService = managerService;        depositInformationBinder = new Binder<>(DepositInformation.class);        ManagerHeader managerHeader = new ManagerHeader(httpSession);        managerHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Manager") && !userRole.equals("Admin")){                httpSession.removeAttribute("user");                managerHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        Footer footer = new Footer();        body.add(new Label("Accounts"));        body.setSizeFull();        TextField userName = new TextField("Username","username");        depositInformationBinder.forField(userName)                .asRequired()                .withValidator(u->u.length()>1,"username must be >=2")                .bind(DepositInformation::getUsername,DepositInformation::setUsername);        NumberField amount = new NumberField("Amount","amount");        depositInformationBinder.forField(amount)                .bind(DepositInformation::getAmount,DepositInformation::setAmount);        DatePicker datePicker = new DatePicker("Deposit Date/For show other month deposits");        datePicker.setValue(LocalDate.now());        depositInformationBinder.forField(datePicker)                .bind(DepositInformation::getLocalDate,DepositInformation::setLocalDate);        Button save = new Button("Save");        save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);//        Button delete = new Button("Delete");//        delete.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        Button show = new Button("Show");        save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        HorizontalLayout field = new HorizontalLayout();        field.add(userName,amount,datePicker);        field.setSizeFull();        HorizontalLayout buttons = new HorizontalLayout();        buttons.add(save,show);        buttons.setSizeFull();        VerticalLayout fieldAndButtons = new VerticalLayout();        fieldAndButtons.add(field,buttons);        body.add(fieldAndButtons);        TextArea textArea = new TextArea();        textArea.setSizeFull();        textArea.setValue(getTextArea(LocalDate.now()));        VerticalLayout verticalLayout = new VerticalLayout();        verticalLayout.add(textArea,new Label("Member deposit list of this month"));        body.add(verticalLayout);        Grid<DepositInformation> depositInformationGrid = new Grid<>(DepositInformation.class);        depositInformationGrid.setItems(getGrid(LocalDate.now()));        body.add(depositInformationGrid);        //save button        Grid<DepositInformation> finalDepositInformationGrid = depositInformationGrid;        Grid<DepositInformation> finalDepositInformationGrid2 = depositInformationGrid;        save.addClickListener(buttonClickEvent -> {            try {                DepositInformation depositInformation = new DepositInformation();                depositInformationBinder.writeBean(depositInformation);                Notification.show(managerService.saveDeposit(depositInformation));                finalDepositInformationGrid2.setItems(getGrid(LocalDate.now()));                textArea.setValue(getTextArea(LocalDate.now()));            } catch (ValidationException e) {}        });        AtomicLong depositNo= new AtomicLong();        depositInformationGrid.addItemClickListener(depositInformationItemClickEvent -> {            depositInformationBinder.readBean(depositInformationItemClickEvent.getItem());            depositNo.set(depositInformationItemClickEvent.getItem().getDepositNo());        });        //set delete button        depositInformationGrid.addComponentColumn(depositInformation -> getComponent(depositInformation,depositInformationGrid,textArea));        //show button        show.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        show.addClickListener(buttonClickEvent -> {            depositInformationGrid.setItems(getGrid(datePicker.getValue()));            textArea.setValue(getTextArea(datePicker.getValue()));        });        add(managerHeader,body,footer);    }    private Component getComponent(DepositInformation depositInformation, Grid<DepositInformation> depositInformationGrid, TextArea textArea) {        Button delete = new Button(VaadinIcon.FILE_REMOVE.create());        delete.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        delete.addClickListener(buttonClickEvent -> {            Dialog dialog = new Dialog();            dialog.setCloseOnEsc(false);            dialog.setCloseOnOutsideClick(false);            NativeButton confirmButton = new NativeButton("Confirm");            NativeButton cancelButton = new NativeButton("Cancel");            dialog.add(confirmButton, cancelButton);            dialog.open();            confirmButton.addClickListener(nativeButtonClickEvent -> {                Notification.show(managerService.deleteDepositInfo(depositInformation.getDepositNo()));                depositInformationGrid.setItems(getGrid(LocalDate.now()));                textArea.setValue(getTextArea(LocalDate.now()));                dialog.close();            });            cancelButton.addClickListener(nativeButtonClickEvent -> {                dialog.close();            });        });        return delete;    }    public String getTextArea(LocalDate date){        double sumOfTotaldeposit = 0;        double sumOfTotalMeal=0;        double sumOfTotalCost=0;        double mealRate=0;        TextArea textArea = new TextArea();        textArea.setSizeFull();        try {            sumOfTotaldeposit = managerService.getSumOfTotalDeposit(date);        } catch (ResourceNotFoundException e) {}        try {            sumOfTotalMeal = managerService.getSumOfMonthMeal(date);        } catch (ResourceNotFoundException e) {}        try {            sumOfTotalCost = managerService.getSumOfMonthCost(date);        } catch (ResourceNotFoundException e) {}        try {            mealRate = managerService.getMealRate(date);        } catch (ResourceNotFoundException e) { }        return "Total deposit of this month : " +sumOfTotaldeposit                +"\nTotal meal of this month : "+sumOfTotalMeal                +"\nTotal cost of this month : "+sumOfTotalCost                +"\nMeal rate of this month: ("+sumOfTotalCost+"/"+sumOfTotalMeal+") = "+mealRate;    }    public List<DepositInformation> getGrid(LocalDate date){        List<DepositInformation> depositList;        try {            depositList = managerService.getDepositList(date.getMonthValue(), date.getYear());        } catch (ResourceNotFoundException e) {            return new ArrayList<>();        }        return depositList;    }}