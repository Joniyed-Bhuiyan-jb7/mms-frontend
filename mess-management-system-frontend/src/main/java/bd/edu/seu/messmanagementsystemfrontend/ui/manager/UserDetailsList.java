package bd.edu.seu.messmanagementsystemfrontend.ui.manager;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.UserDetails;import bd.edu.seu.messmanagementsystemfrontend.service.MemberAndManagerListService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Component;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.dialog.Dialog;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.html.NativeButton;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.util.ArrayList;import java.util.List;@Route("memberList")public class UserDetailsList extends VerticalLayout {    private MemberAndManagerListService memberAndManagerListService;    public UserDetailsList(HttpSession httpSession,MemberAndManagerListService memberAndManagerListService) {        super();        this.memberAndManagerListService = memberAndManagerListService;        ManagerHeader managerHeader = new ManagerHeader(httpSession);        managerHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Manager") && !userRole.equals("Admin")){                httpSession.removeAttribute("user");                managerHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        Footer footer = new Footer();        body.add(new Label("UserList"));        Grid<UserDetails> userDetailsGrid = new Grid<>(UserDetails.class);        userDetailsGrid.setItems(getGridList());        body.add(userDetailsGrid);        userDetailsGrid.addComponentColumn(user->getButton(user,userDetailsGrid,httpSession));        body.setSizeFull();        add(managerHeader,body,footer);    }    private Component getButton(UserDetails userDetails,Grid<UserDetails> userDetailsGrid,HttpSession httpSession) {        Button delete = new Button(VaadinIcon.FILE_REMOVE.create());        delete.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        delete.addClickListener(buttonClickEvent -> {            Dialog dialog = new Dialog();            dialog.setCloseOnEsc(false);            dialog.setCloseOnOutsideClick(false);            NativeButton confirmButton = new NativeButton("Confirm");            NativeButton cancelButton = new NativeButton("Cancel");            dialog.add(confirmButton, cancelButton);            dialog.open();            confirmButton.addClickListener(nativeButtonClickEvent -> {                Notification.show(memberAndManagerListService.deleteUser(userDetails));                Notification.show("Login information also delete--"+memberAndManagerListService.deleteUserLoginInformation(userDetails));                if(httpSession.getAttribute("username").equals(userDetails.getUsername())){                    httpSession.removeAttribute("user");                    httpSession.removeAttribute("username");                    confirmButton.getUI().ifPresent(ui -> ui.navigate("login"));                }                userDetailsGrid.setItems(getGridList());                dialog.close();            });             cancelButton.addClickListener(nativeButtonClickEvent -> {                dialog.close();            });        });        return delete;    }    public List<UserDetails> getGridList(){        List<UserDetails> userDetailsList;        try {            userDetailsList = memberAndManagerListService.getUserList();        } catch (ResourceNotFoundException e) {            return new ArrayList<>();        }        return userDetailsList;    }}