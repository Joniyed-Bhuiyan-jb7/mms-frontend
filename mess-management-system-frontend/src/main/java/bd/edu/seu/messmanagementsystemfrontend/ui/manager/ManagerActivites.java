package bd.edu.seu.messmanagementsystemfrontend.ui.manager;import bd.edu.seu.messmanagementsystemfrontend.exceptions.ResourceNotFoundException;import bd.edu.seu.messmanagementsystemfrontend.model.DailyActivities;import bd.edu.seu.messmanagementsystemfrontend.service.ManagerService;import bd.edu.seu.messmanagementsystemfrontend.ui.Footer;import com.vaadin.flow.component.Component;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.datepicker.DatePicker;import com.vaadin.flow.component.dialog.Dialog;import com.vaadin.flow.component.grid.Grid;import com.vaadin.flow.component.html.Div;import com.vaadin.flow.component.html.Label;import com.vaadin.flow.component.html.NativeButton;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.textfield.TextArea;import com.vaadin.flow.router.Route;import javax.servlet.http.HttpSession;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import java.util.concurrent.atomic.AtomicLong;@Route("activities")public class ManagerActivites extends VerticalLayout {    private ManagerService managerService;    public ManagerActivites(HttpSession httpSession,ManagerService managerService) {        super();        this.managerService = managerService;        ManagerHeader managerHeader = new ManagerHeader(httpSession);        managerHeader.addAttachListener(attachEvent -> {            String userRole =(String) httpSession.getAttribute("user");            if(userRole==null) userRole="unknown";            Notification.show(userRole);            if(!userRole.equals("Manager") && !userRole.equals("Admin")){                httpSession.removeAttribute("user");                managerHeader.getUI().ifPresent(ui -> ui.navigate("login"));            }        });        Div body = new Div();        Footer footer = new Footer();        DatePicker date = new DatePicker("Select a date for show whole month activities");        date.setValue(LocalDate.now());        date.setSizeFull();        Button show = new Button("Show");        show.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        show.setSizeFull();        TextArea mealSumArea = new TextArea();        mealSumArea.setSizeFull();        try {            mealSumArea.setValue("Sum of total cost: "+managerService.getSumOfMonthCost(LocalDate.now()));        } catch (ResourceNotFoundException e) {            mealSumArea.setValue("Sum of total cost: 0.0");        }        show.setSizeFull();        body.add(date,show,mealSumArea);        Grid<DailyActivities> dailyActivitiesGrid = new Grid<>(DailyActivities.class);        dailyActivitiesGrid.setSizeFull();        dailyActivitiesGrid=getGrid(date.getValue());        body.add(new Label("Daily Activities list of this months"));        Grid<DailyActivities> finalDailyActivitiesGrid = dailyActivitiesGrid;        show.addClickListener(buttonClickEvent -> {            try {                finalDailyActivitiesGrid.setItems( managerService.getMonthDailyActivites(date.getValue().getMonthValue(), date.getValue().getYear()));            } catch (ResourceNotFoundException e) {                finalDailyActivitiesGrid.setItems(new ArrayList<>());            }        });        dailyActivitiesGrid.setDetailsVisibleOnClick(true);        AtomicLong serial= new AtomicLong();        Grid<DailyActivities> finalDailyActivitiesGrid1 = dailyActivitiesGrid;        dailyActivitiesGrid.addComponentColumn(dailyActivities -> getComponent(dailyActivities, finalDailyActivitiesGrid1,mealSumArea,date));        body.add(dailyActivitiesGrid);        body.setSizeFull();;        add(managerHeader,body,footer);    }    public Grid<DailyActivities> getGrid(LocalDate date){        Grid<DailyActivities> dailyActivitiesGrid = new Grid<>(DailyActivities.class);        List<DailyActivities> dailyActivitiesList;        try {            dailyActivitiesList = managerService.getMonthDailyActivites(date.getMonthValue(), date.getYear());            dailyActivitiesGrid.setItems(dailyActivitiesList);        } catch (ResourceNotFoundException e) {}        return dailyActivitiesGrid;    }    private Component getComponent(DailyActivities dailyActivities, Grid<DailyActivities> finalDailyActivitiesGrid1, TextArea mealSumArea,DatePicker date) {        Button delete = new Button(VaadinIcon.FILE_REMOVE.create());        delete.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        delete.addClickListener(buttonClickEvent -> {            Dialog dialog = new Dialog();            dialog.setCloseOnEsc(false);            dialog.setCloseOnOutsideClick(false);            NativeButton confirmButton = new NativeButton("Confirm");            NativeButton cancelButton = new NativeButton("Cancel");            dialog.add(confirmButton, cancelButton);            dialog.open();            confirmButton.addClickListener(nativeButtonClickEvent -> {                Notification.show(managerService.delete(dailyActivities.getSerialNo()));                try {                    finalDailyActivitiesGrid1.setItems( managerService.getMonthDailyActivites(date.getValue().getMonthValue(), date.getValue().getYear()));                } catch (ResourceNotFoundException e) {                    finalDailyActivitiesGrid1.setItems(new ArrayList<>());                }                try {                    mealSumArea.setValue("Sum of total cost: "+managerService.getSumOfMonthCost(date.getValue()));                } catch (ResourceNotFoundException e) {                    mealSumArea.setValue("Sum of total cost: 0.0");                }                dialog.close();            });            cancelButton.addClickListener(nativeButtonClickEvent -> {                dialog.close();            });        });        return delete;    }}