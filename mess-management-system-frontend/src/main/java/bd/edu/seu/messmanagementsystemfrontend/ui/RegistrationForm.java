package bd.edu.seu.messmanagementsystemfrontend.ui;import bd.edu.seu.messmanagementsystemfrontend.model.*;import bd.edu.seu.messmanagementsystemfrontend.service.RegistrationService;import com.vaadin.flow.component.Key;import com.vaadin.flow.component.button.Button;import com.vaadin.flow.component.button.ButtonVariant;import com.vaadin.flow.component.formlayout.FormLayout;import com.vaadin.flow.component.icon.VaadinIcon;import com.vaadin.flow.component.notification.Notification;import com.vaadin.flow.component.orderedlayout.VerticalLayout;import com.vaadin.flow.component.select.Select;import com.vaadin.flow.component.textfield.*;import com.vaadin.flow.data.binder.Binder;import com.vaadin.flow.data.binder.Result;import com.vaadin.flow.data.binder.ValueContext;import com.vaadin.flow.data.converter.Converter;import com.vaadin.flow.router.Route;import org.springframework.beans.factory.annotation.Autowired;import java.time.LocalDate;@Route("registration")public class RegistrationForm extends VerticalLayout {    @Autowired    private RegistrationService registrationService;    private Binder<Name> nameBinder;    private Binder<Address> addressBinder;    private Binder<Phone> phoneBinder;    private Binder<MemberManager> memberManagerBinder;    private Binder<LoginInformation> loginInformationBinder;    public RegistrationForm() {        nameBinder=new Binder<>(Name.class);        addressBinder = new Binder<>(Address.class);        phoneBinder = new Binder<>(Phone.class);        memberManagerBinder = new Binder<>(MemberManager.class);        loginInformationBinder = new Binder<>(LoginInformation.class);        FormLayout formLayout = new FormLayout();        TextField firstName = new TextField("FirstName","firstname");        nameBinder.forField(firstName)                .asRequired()                .withValidator(f->f.length()>=3,"Atleast 3 character need")                .bind(Name::getFirstName,Name::setFirstName);        TextField lastName = new TextField("LastName","lastname");        lastName.setMinLength(3);        lastName.setRequired(true);firstName.setErrorMessage("Enter at least 3 character");        nameBinder.forField(lastName)                .asRequired()                .withValidator(f->f.length()>=3,"Atleast 3 character need")                .bind(Name::getLastName,Name::setLastName);        TextField village = new TextField("Village","village");        addressBinder.forField(village)                .asRequired()                .withValidator(v->v.length()>=2,"minimum 2 character need")                .bind(Address::getVillage,Address::setVillage);        TextField thana = new TextField("Thana","thana");        addressBinder.forField(thana)                .asRequired()                .withValidator(t->t.length()>=2,"minimum 2 character need")                .bind(Address::getThana,Address::setThana);        TextField district = new TextField("District","district");        addressBinder.forField(district)                .asRequired()                .withValidator(d->d.length()>=2,"minimum 2 character need")                .bind(Address::getDistrict,Address::setDistrict);        Select<String> countryCode = new Select<>("+880","+91","+966");        countryCode.setValue("+880");        phoneBinder.forField(countryCode)                .asRequired()                .withValidator(c->c.length()>0,"select one")                .bind(Phone::getCode,Phone::setCode);        NumberField number = new NumberField("Number","number");        phoneBinder.forField(number)                .asRequired()                .withValidator(n->n.longValue()>0,"enter a valid number")                .withConverter(new DoubleToLongConverter())                .bind(Phone::getNumber,Phone::setNumber);        EmailField emailField = new EmailField("Email");        emailField.setClearButtonVisible(true);        emailField.setPlaceholder("email");        memberManagerBinder.forField(emailField)                .asRequired()                .withValidator(e->e.contains("@") && e.length()>5,"enter valid email address")                .bind(MemberManager::getEmail,MemberManager::setEmail);        TextField username = new TextField("Username","username");        loginInformationBinder.forField(username)                .asRequired()                .withValidator(u->u.length()>1,"minimum 2 character need")                .bind(LoginInformation::getUsername,LoginInformation::setUsername);        memberManagerBinder.forField(username)                .asRequired()                .bind(MemberManager::getUsername,MemberManager::setUsername);        PasswordField passwordField = new PasswordField();        loginInformationBinder.forField(passwordField)                .asRequired()                .withValidator(p->p.length()>7,"password length should be >=8")                .bind(LoginInformation::getPassword,LoginInformation::setPassword);        Button submit = new Button("Submit", VaadinIcon.ENTER.create());        submit.addClickShortcut(Key.ENTER);        submit.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        submit.setSizeFull();        formLayout.add(firstName,lastName,village,thana,district,countryCode,number,emailField,username,passwordField);        TextArea textArea = new TextArea();        textArea.setValue("Admin Panel:\nUserName: admin\nPassword: admin");        add(formLayout,submit,textArea);        submit.addThemeVariants(ButtonVariant.LUMO_PRIMARY);        submit.addClickShortcut(Key.ENTER);        submit.addClickListener(buttonClickEvent -> {            try {                if (!firstName.isEmpty() && !lastName.isEmpty() && !village.isEmpty() && !thana.isEmpty() && !district.isEmpty() && !countryCode.isEmpty() && !emailField.isEmpty() && !username.isEmpty() && !passwordField.isEmpty() && !number.isEmpty()) {                    LoginInformation loginInformation = new LoginInformation();                    loginInformationBinder.writeBean(loginInformation);                    Address address = new Address();                    addressBinder.writeBean(address);                    Phone phone = new Phone();                    phoneBinder.writeBean(phone);                    Name name = new Name();                    nameBinder.writeBean(name);                    MemberManager memberManager = new MemberManager();                    memberManager.setAddress(address);                    memberManager.setName(name);                    memberManager.setPhone(phone);                    memberManager.setLocalDate(LocalDate.now());                    memberManagerBinder.writeBean(memberManager);                    String register = registrationService.register(memberManager);                    String s = registrationService.saveLoginInformation(loginInformation);                    if(register.equals("Success") && s.equals("Success")){                        Notification.show("Success... Please SignIn with your new username and password");                        submit.getUI().ifPresent(ui -> ui.navigate("login"));                    }                }else{                    Notification.show("No empty field is allowed...Please fill up all the field");                }            }catch (Exception e){                Notification.show(e.getMessage()+"error");            }        });    }}class DoubleToLongConverter implements Converter<Double, Long> {    private static final long serialVersionUID = 1L;    @Override    public Result<Long> convertToModel(Double aDouble, ValueContext valueContext) {        return Result.ok(aDouble.longValue());    }    @Override    public Double convertToPresentation(Long aLong, ValueContext valueContext) {        return aLong.doubleValue();    }}